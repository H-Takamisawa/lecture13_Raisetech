# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1
orbs:
  aws-cli: circleci/aws-cli@4.1.3
  aws-cloudformation: orbss/aws-cloudformation@0.1.6
  ansible-playbook: orbss/ansible-playbook@0.0.5
  ruby: circleci/ruby@2.1.3
  
  
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  execute-cloudformation:
    executor: aws-cloudformation/default
    steps:
      - checkout
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
      - aws-cloudformation/deploy:
          stack-name: lecture13-network
          template-file-path: cloudformation/lecture13-network.yml
      - aws-cloudformation/deploy:
          stack-name: lecture13-security
          template-file-path: cloudformation/lecture13-security.yml
      - aws-cloudformation/deploy:
          stack-name: lecture13-resource
          template-file-path: cloudformation/lecture13-resource.yml
          capabilities: CAPABILITY_NAMED_IAM
          parameter-overrides: RDSpassword=$AWS_DB_PW

      - run:
          name: set environment variable
          command: | 
            set -x
            #EC2publicIP
            echo export AWS_EC2_IP="$(aws cloudformation describe-stacks --stack-name lecture13-resource --query "Stacks[0].Outputs[?OutputKey=='EC2PublicIpAddress'].OutputValue" --output text)" >> $BASH_ENV
            #DB_Endpoint
            echo export AWS_DB_ENDPOINT="$(aws cloudformation describe-stacks --stack-name lecture13-resource --query "Stacks[0].Outputs[?OutputKey=='RDSEndpoint'].OutputValue" --output text)" >> $BASH_ENV
            #ALB_host
            echo export AWS_ALB_HOST="$(aws cloudformation describe-stacks --stack-name lecture13-resource --query "Stacks[0].Outputs[?OutputKey=='ALBDNSName'].OutputValue" --output text)" >> $BASH_ENV
            #S3bucket
            echo export AWS_S3_BUCKET="$(aws cloudformation describe-stacks --stack-name lecture13-resource --query "Stacks[0].Outputs[?OutputKey=='S3BuckeName'].OutputValue" --output text)" >> $BASH_ENV
      - run:
          name: cat $BASH_ENV
          command: |
              cat $BASH_ENV
      #- run:
      #    name: print environment variable
      #    command: |
      #        source $BASH_ENV
      #        echo $AWS_EC2_IP
      #        echo $AWS_DB_ENDPOINT
      #        echo $AWS_ALB_HOST
      #        echo $AWS_S3_BUCKET
      - run:
          name: copy $BASH_ENV
          command:
              cp $BASH_ENV env_var.sh
      - persist_to_workspace:
          root: .
          paths:
            - env_var.sh
  
  execute-ansible:
    executor: ansible-playbook/default
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: check env_var.sh
          command: |
            source env_var.sh
            cat env_var.sh
      - run:
          name: read env_var.sh
          command: |
            set -x
            cat env_var.sh >> $BASH_ENV
            cat $BASH_ENV
      #- run:
      #    name: print environment variable
      #    command: |
      #      echo $AWS_EC2_IP
      #      echo $AWS_DB_ENDPOINT
      #      echo $AWS_ALB_HOST
      #      echo $AWS_S3_BUCKET
      - add_ssh_keys:
          fingerprints:
            - SHA256:6CLyypQhbbC8Wo5wlpz7iS8AwYoOPy/qLhkQrePX5t4
      - ansible-playbook/install:
          version: 2.9.23
      - ansible-playbook/playbook:
          playbook: ansible/playbook.yml
          playbook-options: -i ${AWS_EC2_IP}, --private-key ~/.ssh/ansible-test-key

  execute-serverspec:
    executor: ruby/default
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: check env_var.sh
          command: |
            source env_var.sh
            cat env_var.sh
      - run:
          name: read env_var.sh
          command: |
            set -x
            cat env_var.sh >> $BASH_ENV
            cat $BASH_ENV
      - ruby/install:
          version: 3.2.3
      - run:
          name: Install Dependencies
          command: |
            cd serverspec
            bundle install
      - run:
          name: execute serverspec tests
          command: | 
            cd serverspec
            bundle exec rake spec

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  CircleCI-Practice-workflow:
    jobs:
      - execute-cloudformation
      - execute-ansible:
          requires:
            - execute-cloudformation
      - execute-serverspec:
          requires:
            - execute-ansible
